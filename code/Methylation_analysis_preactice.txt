# https://github.com/hamidghaedi/Methylation_Analysis
setwd("Desktop/DNAMethylation/")
#______________loading packages__________________#
library(TCGAbiolinks)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
library(IlluminaHumanMethylation450kmanifest)
library(minfi)
library(limma)
library(missMethyl) # Analysing Illumina HumanMethylation BeadChip Data
library(DMRcate) # Methylation array and sequencing spatial analysis methods
library(Gviz)
library(ggplot2)
library(RColorBrewer)
library(edgeR)

library(dplyr)

# Preparing data
query_met <- GDCquery(project= "TCGA-GBM", 
                      data.category = "DNA Methylation",
                      platform = c("Illumina Human Methylation 450"),
                      sample.type = "Recurrent Tumor", 
                      data.type = "Methylation Beta Value")
GDCdownload(query_met)

library(sesame)
data.met <- GDCprepare(query_met)

saveRDS(object = data.met, file = "data.met.RDS")

##================================================##
# Import data
data.met = readRDS(file = "data.met.RDS")

# met matrix
met <- as.data.frame(SummarizedExperiment::assay(data.met))
# clinical data
clinical <- data.frame(data.met@colData)


#___________inspecting methylation data_______________#

# get the 450k annotation data
ann450k <- getAnnotation(IlluminaHumanMethylation450kanno.ilmn12.hg19)

## remove probes with NA
probe.na <- rowSums(is.na(met))
table(probe.na == 0)
# chose those has no NA values in rows
probe <- probe.na[probe.na == 0]
met <- met[row.names(met) %in% names(probe), ]
# met %>% dim() # 410423     13

## remove probes that match chromosomes X and Y 
keep <- !(row.names(met) %in% ann450k$Name[ann450k$chr %in% c("chrX","chrY")])
table(keep)
met <- met[keep, ]
rm(keep) # remove no further needed probes.

## remove SNPs overlapped probe
table (is.na(ann450k$Probe_rs))
# probes without snp
# SNP의 영향을 받지 않는 프로브들만을 사용하여 분석을 수행
# SNP가 프로브 위치에 존재하는 경우, 이는 메틸레이션 측정에 영향을 줄 수 있음
no.snp.probe <- ann450k$Name[is.na(ann450k$Probe_rs)] 
snp.probe <- ann450k[!is.na(ann450k$Probe_rs), ]
#snps with maf <= 0.05
# 소수 대립유전자 빈도(minor allele frequency, MAF)가 0.05 이하인 프로브들의 이름을 선택하는 과정
snp5.probe <- snp.probe$Name[snp.probe$Probe_maf <= 0.05]

# filter met
met <- met[row.names(met) %in% c(no.snp.probe, snp5.probe), ]
#remove no-further needed dataset
rm(no.snp.probe, probe, probe.na, snp.probe, snp5.probe)

## Removing probes that have been demonstrated to map to multiple places in the genome.
# list adapted from https://www.tandfonline.com/doi/full/10.4161/epi.23470
crs.reac <- read.csv("cross_reactive_probe.chen2013.csv")
crs.reac <- crs.reac$TargetID[-1]

# filtre met
met <- met[ -which(row.names(met) %in% crs.reac), ]
bval <- met

## Converting beta values to m_values
## m = log2(beta/1-beta)
# 오즈 비율(odds ratio)
# 메틸레이션 데이터처럼 0과 1 사이의 값으로 제한된 경우, 데이터의 변동성을 조절하고, 통계적 분석을 위한 모델 가정에 적합하게 만듭니다.
# beta / (1 - beta)를 계산한 뒤 로그 변환(log2)을 적용하면, 이를 M 값(M value)이라고 합니다. 로그 변환은 오즈 비율의 극단적인 값에 대한 감도를 줄이고, 데이터 분석에서의 영향력을 균등하게 합니다.
mval <- t(apply(met, 1, function(x) log2(x/(1-x))))
#______________saving/loading_____________________#
# save data sets
# saveRDS(mval, file = "mval.RDS", compress = FALSE)
# saveRDS (bval, file = "bval.RDS", compress = FALSE)
# mval <- readRDS("mval.RDS")
# bval <- readRDS("bval.RDS")

#___________ Differential methylation analysis

clinical %>% str()
clinical <- clinical[,]
clinical$gender %>% table()
barcode <- clinical$barcode

# removing samples from meth matrixes
bval <- bval[, colnames(bval) %in% barcode]
mval <- mval[, colnames(mval) %in% barcode]

# Making sure about samples in clinical and matrixes and their order
table(colnames(mval) %in% row.names(clinical))
table(colnames(bval) %in% row.names(clinical))
#
all(row.names(clinical) == colnames(bval))
all(row.names(clinical) == colnames(mval))

#Making grouping variable
clinical$gender <- as.factor(clinical$gender)
#levels(clinical$paper_Histologic.grade)
clinical$gender <- relevel(clinical$gender, ref = "male")


#_____________ DMC analysis________________#
design <- model.matrix(~ gender, data = clinical)
# fit the linear model 
fit <- lmFit(mval, design)
fit2 <- eBayes(fit)

# extracting significantly methylated probes
deff.meth = topTable(fit2, coef=ncol(design), sort.by="p",number = nrow(mval), adjust.method = "BY")
# Visualization
# plot the top 10 most significantly differentially methylated CpGs 
par(mfrow=c(2,5))
sapply(rownames(deff.meth)[1:5], function(cpg){
  plotCpg(bval, cpg=cpg, pheno=clinical$gender, ylab = "Beta values")
})

# making a volcano plot
#making dataset
dat <- data.frame(foldchange = fit[["coefficients"]][,2], 
                  logPvalue =  -log10(fit2[["p.value"]][,2]))
dat$threshold <- as.factor(abs(dat$foldchange) < 0.4)

#Visualization
cols <- c("TRUE" = "grey", "FALSE" = "blue")
ggplot(data=dat, aes(x=foldchange, 
                     y = logPvalue, 
                     color=threshold)) +
  geom_point(alpha=0.6, size=1.2) +
  scale_colour_manual(values = cols) +
  geom_vline(xintercept = 0.4, colour="#990000", linetype="dashed") + 
  geom_vline(xintercept = - 0.4, colour="#990000", linetype="dashed") +
  theme(legend.position="none") +
  xlab("Fold Change") +
  ylab("-log10 p value") +
  theme_bw() +
  theme(legend.position = "none")

# Differentially methylated regions (DMRs) analysis
# Setting some annotation
myAnnotation <- cpg.annotate(object = mval, datatype = "array", 
                             what = "M", 
                             analysis.type = "differential", 
                             design = design, 
                             contrasts = FALSE, 
                             coef = "genderfemale", 
                             arraytype = "450K",
                             fdr = 0.001)
str(myAnnotation)

# DMR analysis
DMRs <- dmrcate(myAnnotation, lambda=1000, C=2)
results.ranges <- extractRanges(DMRs)
results.ranges




